using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using static UnityEngine.Rendering.DebugUI;

public class GameManager : MonoBehaviour
{
    public static GameManager instance;

    public GridData gridData;

    public Camera mainCam;
    public Text testText;

    private const string CoinKey = "Coin";
    private const int DefaultCoin = 100;

    public static int currentCoin = 0;

    [SerializeField] private FieldManager fieldManager;

    [SerializeField] private PlacementSystem placementSystem;

    [SerializeField] private float autoSaveInterval = 300f; // 자동 저장 간격 (초)
    private float autoSaveTimer; // 자동 저장 타이머

    private void Awake()
    {
        if (instance == null)
        {
            instance = this;
            DontDestroyOnLoad(gameObject);
        }
        else
        {
            Destroy(gameObject);
        }

        SaveSystem.Init();
        InitializeSaveData();
    }

    void Start()
    {
        //InitializePlayerPrefs();    // 테스트할때만 주석 풀기, 나중에 삭제

        //테스트 한다고 시작할때 코인 많게 해둠 나중에 삭제해야함
        currentCoin = 2147483647;
        Debug.LogWarning("테스트 코인 할당 진행됨");

        // 자동 저장 타이머 초기화
        autoSaveTimer = autoSaveInterval;

        gridData = placementSystem.placedOBJData;

        if (PlayerPrefs.GetInt("TutorialDone", 0) == 0)
        {
            currentCoin = 150160;
        }
    }

    void Update()
    {
        // 타이머 업데이트
        autoSaveTimer -= Time.deltaTime;

        if (autoSaveTimer <= 0)
        {
            SaveManager.Instance.SaveGameData();
            Debug.Log("자동 저장 완료!");
            autoSaveTimer = autoSaveInterval; // 타이머 리셋
        }

        testText.text = currentCoin.ToString("N0");
    }

    private void InitializeSaveData()
    {
        if (PlayerPrefs.GetInt("TutorialDone", 0) == 0) // 첫 실행이면 = 세이브 데이터가 없으면
        {
            currentCoin = DefaultCoin;
            SaveManager.Instance.SaveGameData();
        }
        else
        {
            currentCoin = PlayerPrefs.GetInt(CoinKey, currentCoin);
            SaveManager.Instance.LoadGameData();
        }
    }

    public void InitializePlayerPrefs()
    {
        int totalCrops = 61; // 작물의 마지막 ID

        for (int i = 9; i <= totalCrops; i++)
        {
            string cropKey = "CropUnlocked_" + i; // 각 작물의 해금 상태 키
            PlayerPrefs.DeleteKey(cropKey); // 해당 키 삭제하여 초기화
        }
        PlayerPrefs.SetInt("TutorialKeyboard", 0);
        PlayerPrefs.SetInt("KeyboardAllClear", 0);
        PlayerPrefs.SetInt("TutorialDone", 0);

        fieldManager.InitializeUnlockedFields();

        // 전체 해금 인덱스도 초기화 (Optional)
        PlayerPrefs.SetInt("UnlockPlant", 2); // UnlockPlant도 초기화
        PlayerPrefs.Save(); // 변경사항 저장
    }

    public void QuitGame()
    {
        // 플레이어 프리퍼런스를 저장하고 게임 종료
        PlayerPrefs.Save();

#if UNITY_EDITOR
        // 에디터에서는 플레이 모드를 중지합니다.
        UnityEditor.EditorApplication.isPlaying = false;
#else
        // 빌드된 애플리케이션에서는 게임을 종료합니다.
        Application.Quit();
#endif
    }

    // 게임 종료 시 호출되는 메서드
    void OnApplicationQuit()
    {
        // 게임 종료 시에 저장할 작업을 여기에 작성
        Debug.Log("게임이 종료됩니다. 저장 작업을 수행합니다.");

        // 저장 메서드 호출
    }

    // 코인 추가 메서드
    public static void AddCoins(int amount)
    {
        if (amount < 0)
            return;
        currentCoin += amount;
        AchievementsDatabase.CoinProgress(currentCoin);
        PlayerPrefs.SetInt(CoinKey, currentCoin);
        PlayerPrefs.Save();
    }

    // 코인 차감 메서드
    public static void SubtractCoins(int amount)
    {
        if (amount < 0)
            return;
        if (currentCoin - amount < 0)
        {
            Debug.Log("코인이 충분하지 않습니다.");
            return;
        }
        else
        {
            currentCoin -= amount;
            AchievementsDatabase.CoinProgress(currentCoin);
            PlayerPrefs.SetInt(CoinKey, currentCoin);
            PlayerPrefs.Save();
        }
    }
}

/*[System.Serializable]
public class AllSaveData
{
    public int coin;
    public Vector3 playerPosition;
    public string gridDataJson;
    public List<Crop> crops;
    public List<FarmField> fields;
    public List<CropStorage> storedCropsByID;
    public int currentWaterAmount;
}*/